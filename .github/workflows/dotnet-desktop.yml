# In this pipeline, I'm repeating steps for x64 and x86.
# Could be done with a matrix configuration, but I don't want to repeat some stages (such as checkout, install dotnet, etc...)

name: Generate installers

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  Framework: net5.0-windows
  Configuration: Release
  Solution_Name: WinRemoteControl.sln
  Project_Path: WinRemoteControl\WinRemoteControl
  Csproj_Subfolder: WinRemoteControl
  Csproj_Project_Path: WinRemoteControl\WinRemoteControl.csproj
  # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
  # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
  Win64: win-x64
  Win32: win-x86
  InnoSetup_Path: $HOME\AppData\Local\Programs\Inno Setup 6\ISCC.exe
  InnoSetupScript_Path: .\Installer\InstallerScript.iss

jobs:

  build:  
    runs-on: windows-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    #- name: Restore the application
    #  run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /r $env:abi 
    #  env:
    #    abi: ${{ matrix.abi }}
    
    # Generate build artifacts
    - name: Build the application for 32-bit
      run: dotnet publish ${{ env.Csproj_Project_Path }} /p:Configuration=${{ env.Configuration }} -r ${{ env.Win32 }}
    
    - name: Build the application for 64-bit
      run: dotnet publish ${{ env.Csproj_Project_Path }} /p:Configuration=${{ env.Configuration }} -r ${{ env.Win64 }}
        
    # Upload published builds: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts - 32-bit
      uses: actions/upload-artifact@v3
      with:
        name: 32-bit build
        path: ${{ github.workspace }}\${{ env.Csproj_Subfolder }}\bin\${{ env.Configuration }}\${{ env.Framework }}\${{ env.Win32 }}
        
    - name: Upload build artifacts - 64-bit
      uses: actions/upload-artifact@v3
      with:
        name: 64-bit build 
        path: ${{ github.workspace }}\${{ env.Csproj_Subfolder }}\bin\${{ env.Configuration }}\${{ env.Framework }}\${{ env.Win64 }}
        
    # Inno-Setup
    - name: Download Inno Setup
      shell: pwsh
      run: Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe?site=1" -OutFile .\is.exe
      
    - name: Install Inno Setup
      shell: pwsh
      run: .\is.exe /verysilent /currentuser
      
    - name: Run Inno Setup script compiler
      shell: pwsh
      run: & "$HOME\AppData\Local\Programs\Inno Setup 6\ISCC.exe" ".\Installer\InstallerScript.iss"

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    #- name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    Appx_Bundle: Always
    #    Appx_Bundle_Platforms: x86|x64
    #    Appx_Package_Build_Mode: StoreUpload
    #    Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages
